import { Component, Input, Output, EventEmitter, TemplateRef, OnInit, ElementRef, ChangeDetectorRef, AfterContentChecked } from '@angular/core';
// WORKAROUND: https://github.com/dherges/ng-packagr/issues/217#issuecomment-339460255
import * as momentImported from 'moment';
var moment = momentImported;
var CalendarSchedulerEventComponent = /** @class */ (function () {
    function CalendarSchedulerEventComponent(hostElement, changeDetectorRef) {
        this.hostElement = hostElement;
        this.changeDetectorRef = changeDetectorRef;
        this.showContent = true;
        this.showActions = true;
        this.showStatus = true;
        this.eventClicked = new EventEmitter();
    }
    CalendarSchedulerEventComponent.prototype.ngOnInit = function () {
        this.title = this.title || this.event.event.title + ", " + (this.event.event.content ? this.event.event.content + "," : null) + " " + moment(this.event.event.start).format('dddd L, LT');
    };
    CalendarSchedulerEventComponent.prototype.ngAfterContentChecked = function () {
        this.changeDetectorRef.detectChanges();
    };
    CalendarSchedulerEventComponent.prototype.onMouseEnter = function () {
        // Maybe do something
    };
    CalendarSchedulerEventComponent.prototype.onMouseLeave = function () {
        // Maybe do something
    };
    /**
     * @hidden
     */
    CalendarSchedulerEventComponent.prototype.onEventClick = function (mouseEvent, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (event.isClickable) {
            this.eventClicked.emit({ event: event });
        }
    };
    CalendarSchedulerEventComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    CalendarSchedulerEventComponent.decorators = [
        { type: Component, args: [{
                    selector: 'calendar-scheduler-event',
                    template: "\n        <ng-template #defaultTemplate>\n            <div class=\"cal-scheduler-event\"\n                [title]=\"title\"\n                [style.max-width.px]=\"container.clientWidth - 4\"\n                [class.cal-cancelled]=\"event.event.isCancelled\"\n                [class.cal-disabled]=\"event.event.isDisabled\"\n                [class.cal-not-clickable]=\"!event.event.isClickable\"\n                [class.cal-draggable]=\"event.event.draggable\"\n                [class.cal-starts-before-day]=\"event.startsBeforeDay\"\n                [class.cal-ends-after-day]=\"event.endsAfterDay\"\n                [style.backgroundColor]=\"event.event.color?.secondary\"\n                [style.borderColor]=\"event.event.color?.primary\"\n                (mwlClick)=\"onEventClick($event, event.event)\"\n                (mouseenter)=\"onMouseEnter()\"\n                (mouseleave)=\"onMouseLeave()\">\n                <calendar-scheduler-event-title\n                    view=\"week\"\n                    [event]=\"event.event\"\n                    [showStatus]=\"showStatus\"\n                    [showContent]=\"showContent\"\n                    [showActions]=\"showActions\"\n                    [customTemplate]=\"eventTitleTemplate\">\n                </calendar-scheduler-event-title>\n                <calendar-scheduler-event-content\n                    *ngIf=\"showContent\"\n                    [event]=\"event.event\"\n                    [eventContainer]=\"container\">\n                </calendar-scheduler-event-content>\n                <calendar-scheduler-event-actions\n                    *ngIf=\"showActions && showContent && (event.event.isClickable || event.event.isDisabled)\"\n                    [event]=\"event.event\">\n                </calendar-scheduler-event-actions>\n            </div>\n        </ng-template>\n        <ng-template\n            [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n            [ngTemplateOutletContext]=\"{\n                title: title,\n                day: day,\n                event: event,\n                showContent: showContent,\n                showActions: showActions,\n                showStatus: showStatus,\n                eventTitleTemplate: eventTitleTemplate,\n                eventClicked: eventClicked\n            }\">\n        </ng-template>\n    ",
                    host: {
                        '[style.height.%]': '100'
                    }
                },] }
    ];
    CalendarSchedulerEventComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    CalendarSchedulerEventComponent.propDecorators = {
        title: [{ type: Input }],
        day: [{ type: Input }],
        event: [{ type: Input }],
        container: [{ type: Input }],
        showContent: [{ type: Input }],
        showActions: [{ type: Input }],
        showStatus: [{ type: Input }],
        customTemplate: [{ type: Input }],
        eventTitleTemplate: [{ type: Input }],
        eventClicked: [{ type: Output }]
    };
    return CalendarSchedulerEventComponent;
}());
export { CalendarSchedulerEventComponent };
//# sourceMappingURL=data:application/json;base64,