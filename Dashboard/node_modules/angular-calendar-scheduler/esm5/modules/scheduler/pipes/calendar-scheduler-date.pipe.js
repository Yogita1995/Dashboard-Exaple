import { Pipe, LOCALE_ID, Inject } from '@angular/core';
import { CalendarDateFormatter, DateAdapter } from 'angular-calendar';
var CalendarSchedulerDatePipe = /** @class */ (function () {
    function CalendarSchedulerDatePipe(dateAdapter, dateFormatter, locale) {
        this.dateAdapter = dateAdapter;
        this.dateFormatter = dateFormatter;
        this.locale = locale;
    }
    CalendarSchedulerDatePipe.prototype.transform = function (date, method, locale, weekStartsOn, excludeDays, daysInWeek, startsWithToday) {
        if (locale === void 0) { locale = this.locale; }
        if (weekStartsOn === void 0) { weekStartsOn = 0; }
        if (excludeDays === void 0) { excludeDays = []; }
        if (typeof this.dateFormatter[method] === 'undefined') {
            var allowedMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(CalendarDateFormatter.prototype)).filter(function (iMethod) { return iMethod !== 'constructor'; });
            throw new Error(method + " is not a valid date formatter. Can only be one of " + allowedMethods.join(', '));
        }
        return this.dateFormatter[method]({
            dateAdapter: this.dateAdapter,
            date: date,
            locale: locale,
            weekStartsOn: weekStartsOn,
            excludeDays: excludeDays,
            daysInWeek: daysInWeek,
            startsWithToday: startsWithToday
        });
    };
    CalendarSchedulerDatePipe.ctorParameters = function () { return [
        { type: DateAdapter },
        { type: CalendarDateFormatter },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    CalendarSchedulerDatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'calendarSchedulerDate'
                },] }
    ];
    CalendarSchedulerDatePipe.ctorParameters = function () { return [
        { type: DateAdapter },
        { type: CalendarDateFormatter },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return CalendarSchedulerDatePipe;
}());
export { CalendarSchedulerDatePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2NoZWR1bGVyLWRhdGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItY2FsZW5kYXItc2NoZWR1bGVyLyIsInNvdXJjZXMiOlsibW9kdWxlcy9zY2hlZHVsZXIvcGlwZXMvY2FsZW5kYXItc2NoZWR1bGVyLWRhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV0RTtJQUlFLG1DQUNVLFdBQXdCLEVBQ3hCLGFBQW9DLEVBQ2pCLE1BQWM7UUFGakMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsa0JBQWEsR0FBYixhQUFhLENBQXVCO1FBQ2pCLFdBQU0sR0FBTixNQUFNLENBQVE7SUFDeEMsQ0FBQztJQUVKLDZDQUFTLEdBQVQsVUFDRSxJQUFVLEVBQ1YsTUFBYyxFQUNkLE1BQTRCLEVBQzVCLFlBQXdCLEVBQ3hCLFdBQTBCLEVBQzFCLFVBQW1CLEVBQ25CLGVBQXlCO1FBSnpCLHVCQUFBLEVBQUEsU0FBaUIsSUFBSSxDQUFDLE1BQU07UUFDNUIsNkJBQUEsRUFBQSxnQkFBd0I7UUFDeEIsNEJBQUEsRUFBQSxnQkFBMEI7UUFJMUIsSUFBSSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssV0FBVyxFQUFFO1lBQ3JELElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FDL0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FDdkQsQ0FBQyxNQUFNLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxPQUFPLEtBQUssYUFBYSxFQUF6QixDQUF5QixDQUFDLENBQUM7WUFDL0MsTUFBTSxJQUFJLEtBQUssQ0FDVixNQUFNLDJEQUFzRCxjQUFjLENBQUMsSUFBSSxDQUNoRixJQUFJLENBQ0gsQ0FDSixDQUFDO1NBQ0g7UUFDRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDaEMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLElBQUksTUFBQTtZQUNKLE1BQU0sUUFBQTtZQUNOLFlBQVksY0FBQTtZQUNaLFdBQVcsYUFBQTtZQUNYLFVBQVUsWUFBQTtZQUNWLGVBQWUsaUJBQUE7U0FDaEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBakNzQixXQUFXO2dCQUNULHFCQUFxQjs2Q0FDM0MsTUFBTSxTQUFDLFNBQVM7OztnQkFQcEIsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSx1QkFBdUI7aUJBQzlCOzs7Z0JBSitCLFdBQVc7Z0JBQWxDLHFCQUFxQjs2Q0FTekIsTUFBTSxTQUFDLFNBQVM7O0lBZ0NyQixnQ0FBQztDQUFBLEFBdkNELElBdUNDO1NBcENZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIExPQ0FMRV9JRCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENhbGVuZGFyRGF0ZUZvcm1hdHRlciwgRGF0ZUFkYXB0ZXIgfSBmcm9tICdhbmd1bGFyLWNhbGVuZGFyJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnY2FsZW5kYXJTY2hlZHVsZXJEYXRlJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJTY2hlZHVsZXJEYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBkYXRlQWRhcHRlcjogRGF0ZUFkYXB0ZXIsXHJcbiAgICBwcml2YXRlIGRhdGVGb3JtYXR0ZXI6IENhbGVuZGFyRGF0ZUZvcm1hdHRlcixcclxuICAgIEBJbmplY3QoTE9DQUxFX0lEKSBwcml2YXRlIGxvY2FsZTogc3RyaW5nXHJcbiAgKSB7fVxyXG5cclxuICB0cmFuc2Zvcm0oXHJcbiAgICBkYXRlOiBEYXRlLFxyXG4gICAgbWV0aG9kOiBzdHJpbmcsXHJcbiAgICBsb2NhbGU6IHN0cmluZyA9IHRoaXMubG9jYWxlLFxyXG4gICAgd2Vla1N0YXJ0c09uOiBudW1iZXIgPSAwLFxyXG4gICAgZXhjbHVkZURheXM6IG51bWJlcltdID0gW10sXHJcbiAgICBkYXlzSW5XZWVrPzogbnVtYmVyLFxyXG4gICAgc3RhcnRzV2l0aFRvZGF5PzogYm9vbGVhblxyXG4gICk6IHN0cmluZyB7XHJcbiAgICBpZiAodHlwZW9mIHRoaXMuZGF0ZUZvcm1hdHRlclttZXRob2RdID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBjb25zdCBhbGxvd2VkTWV0aG9kcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKFxyXG4gICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihDYWxlbmRhckRhdGVGb3JtYXR0ZXIucHJvdG90eXBlKVxyXG4gICAgICApLmZpbHRlcihpTWV0aG9kID0+IGlNZXRob2QgIT09ICdjb25zdHJ1Y3RvcicpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgYCR7bWV0aG9kfSBpcyBub3QgYSB2YWxpZCBkYXRlIGZvcm1hdHRlci4gQ2FuIG9ubHkgYmUgb25lIG9mICR7YWxsb3dlZE1ldGhvZHMuam9pbihcclxuICAgICAgICAgICcsICdcclxuICAgICAgICApfWBcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmRhdGVGb3JtYXR0ZXJbbWV0aG9kXSh7XHJcbiAgICAgIGRhdGVBZGFwdGVyOiB0aGlzLmRhdGVBZGFwdGVyLFxyXG4gICAgICBkYXRlLFxyXG4gICAgICBsb2NhbGUsXHJcbiAgICAgIHdlZWtTdGFydHNPbixcclxuICAgICAgZXhjbHVkZURheXMsXHJcbiAgICAgIGRheXNJbldlZWssXHJcbiAgICAgIHN0YXJ0c1dpdGhUb2RheVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==