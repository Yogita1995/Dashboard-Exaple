import { __assign, __read, __spread } from "tslib";
// WORKAROUND: https://github.com/dherges/ng-packagr/issues/217#issuecomment-339460255
import * as momentImported from 'moment';
var moment = momentImported;
export var DAYS_OF_WEEK;
(function (DAYS_OF_WEEK) {
    DAYS_OF_WEEK[DAYS_OF_WEEK["SUNDAY"] = 0] = "SUNDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["MONDAY"] = 1] = "MONDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["TUESDAY"] = 2] = "TUESDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["WEDNESDAY"] = 3] = "WEDNESDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["THURSDAY"] = 4] = "THURSDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["FRIDAY"] = 5] = "FRIDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["SATURDAY"] = 6] = "SATURDAY";
})(DAYS_OF_WEEK || (DAYS_OF_WEEK = {}));
var DEFAULT_WEEKEND_DAYS = [
    DAYS_OF_WEEK.SUNDAY,
    DAYS_OF_WEEK.SATURDAY
];
export var DAYS_IN_WEEK = 7;
export var HOURS_IN_DAY = 24;
export var MINUTES_IN_HOUR = 60;
export var SECONDS_IN_DAY = 60 * 60 * 24;
export var DEFAULT_HOUR_SEGMENT_HEIGHT_PX = 40;
export var DEFAULT_EVENT_WIDTH = 1;
export var DEFAULT_HOUR_SEGMENTS = 2;
export function getSchedulerViewHourGrid(dateAdapter, _a) {
    var viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd;
    var setMinutes = dateAdapter.setMinutes, setHours = dateAdapter.setHours, startOfDay = dateAdapter.startOfDay, startOfMinute = dateAdapter.startOfMinute, endOfDay = dateAdapter.endOfDay, addMinutes = dateAdapter.addMinutes, addHours = dateAdapter.addHours, addDays = dateAdapter.addDays;
    var hours = [];
    var startOfView = setMinutes(setHours(startOfDay(viewDate), sanitiseHours(dayStart.hour)), sanitiseMinutes(dayStart.minute));
    var endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), sanitiseHours(dayEnd.hour)), sanitiseMinutes(dayEnd.minute));
    var segmentDuration = MINUTES_IN_HOUR / hourSegments;
    var startOfViewDay = startOfDay(viewDate);
    var endOfViewDay = endOfDay(viewDate);
    var dateAdjustment = function (d) { return d; };
    // this means that we change from or to DST on this day and that's going to cause problems so we bump the date
    if (startOfViewDay.getTimezoneOffset() !== endOfViewDay.getTimezoneOffset()) {
        startOfViewDay = addDays(startOfViewDay, 1);
        startOfView = addDays(startOfView, 1);
        endOfView = addDays(endOfView, 1);
        dateAdjustment = function (d) { return addDays(d, -1); };
    }
    for (var i = 0; i < HOURS_IN_DAY; i++) {
    }
    for (var i = 0; i < HOURS_IN_DAY; i++) {
        var segments = [];
        for (var j = 0; j < hourSegments; j++) {
            var date = addMinutes(addHours(startOfViewDay, i), j * segmentDuration);
            if (date >= startOfView && date < endOfView) {
                segments.push({
                    date: dateAdjustment(date),
                    displayDate: date,
                    isStart: j === 0
                });
            }
        }
        if (segments.length > 0) {
            hours.push({ segments: segments });
        }
    }
    return hours;
}
export function getSchedulerView(dateAdapter, _a) {
    var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, viewDays = _a.viewDays, weekStartsOn = _a.weekStartsOn, startsWithToday = _a.startsWithToday, _c = _a.excluded, excluded = _c === void 0 ? [] : _c, _d = _a.hourSegments, hourSegments = _d === void 0 ? DEFAULT_HOUR_SEGMENTS : _d, dayStart = _a.dayStart, dayEnd = _a.dayEnd, _e = _a.weekendDays, weekendDays = _e === void 0 ? DEFAULT_WEEKEND_DAYS : _e, _f = _a.hourSegmentHeight, hourSegmentHeight = _f === void 0 ? DEFAULT_HOUR_SEGMENT_HEIGHT_PX : _f, _g = _a.eventWidth, eventWidth = _g === void 0 ? DEFAULT_EVENT_WIDTH : _g, logEnabled = _a.logEnabled;
    if (!events) {
        events = [];
    }
    var addDays = dateAdapter.addDays, startOfDay = dateAdapter.startOfDay, endOfDay = dateAdapter.endOfDay, startOfWeek = dateAdapter.startOfWeek, endOfWeek = dateAdapter.endOfWeek;
    var startOfViewWeek = startsWithToday || viewDays < DAYS_IN_WEEK ? startOfDay(viewDate) : startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    var endOfViewWeek = startsWithToday || viewDays < DAYS_IN_WEEK ? addDays(endOfDay(viewDate), viewDays - 1) : endOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    var eventsInWeek = getEventsInPeriod(dateAdapter, {
        events: events,
        periodStart: startOfViewWeek,
        periodEnd: endOfViewWeek
    });
    var days = getSchedulerViewDays(dateAdapter, {
        viewDate: viewDate,
        viewDays: viewDays,
        weekStartsOn: weekStartsOn,
        startsWithToday: startsWithToday,
        excluded: excluded,
        weekendDays: weekendDays
    });
    days.forEach(function (day) {
        var startOfView = dateAdapter.setMinutes(dateAdapter.setHours(dateAdapter.startOfDay(day.date), dayStart.hour), dayStart.minute);
        var endOfView = dateAdapter.setMinutes(dateAdapter.setHours(dateAdapter.startOfMinute(dateAdapter.endOfDay(day.date)), dayEnd.hour), dayEnd.minute);
        var previousDayEvents = [];
        var eventsInDay = getEventsInPeriod(dateAdapter, {
            events: eventsInWeek,
            periodStart: startOfView,
            periodEnd: endOfView
        });
        var dayEvents = eventsInDay
            .sort(function (eventA, eventB) { return eventA.start.valueOf() - eventB.start.valueOf(); })
            .map(function (ev) {
            var eventStart = ev.start;
            var eventEnd = ev.end || eventStart;
            var startsBeforeDay = eventStart < startOfView;
            var endsAfterDay = dateAdapter.addMinutes(eventEnd, -1) > endOfView;
            var hourHeightModifier = ((hourSegments * hourSegmentHeight) + 1) / MINUTES_IN_HOUR; // +1 for the 1px segment bottom border
            var top = 0;
            if (eventStart > startOfView) {
                top += dateAdapter.differenceInMinutes(eventStart, startOfView);
            }
            top *= hourHeightModifier;
            var startDate = startsBeforeDay ? startOfView : eventStart;
            var endDate = endsAfterDay ? endOfView : eventEnd;
            var height = dateAdapter.differenceInMinutes(endDate, startDate);
            if (!ev.end) {
                height = hourSegmentHeight;
            }
            else {
                height *= hourHeightModifier;
            }
            var bottom = top + height;
            var overlappingPreviousEvents = getOverLappingEvents(ev, previousDayEvents, top, bottom, logEnabled);
            var left = 0;
            while (overlappingPreviousEvents.some(function (previousEvent) { return previousEvent.left === left; })) {
                left += eventWidth;
            }
            var event = {
                event: ev,
                top: top,
                height: height,
                width: eventWidth,
                left: left,
                startsBeforeDay: startsBeforeDay,
                endsAfterDay: endsAfterDay
            };
            previousDayEvents.push(event);
            return event;
        });
        function getColumnCount(allEvents, prevOverlappingEvents) {
            var columnCount = Math.max.apply(Math, __spread(prevOverlappingEvents.map(function (ev) { return ev.left + 1; })));
            var nextOverlappingEvents = allEvents
                .filter(function (ev) { return ev.left >= columnCount; })
                .filter(function (ev) {
                return (getOverLappingEvents(ev, prevOverlappingEvents, ev.top, ev.top + ev.height, logEnabled).length > 0);
            });
            if (nextOverlappingEvents.length > 0) {
                return getColumnCount(allEvents, nextOverlappingEvents);
            }
            else {
                return columnCount;
            }
        }
        var mappedEvents = dayEvents.map(function (event) {
            var columnCount = getColumnCount(dayEvents, getOverLappingEvents(event, dayEvents, event.top, event.top + event.height, logEnabled));
            var width = 100 / columnCount;
            return __assign(__assign({}, event), { left: event.left * width, width: width });
        });
        day.events = mappedEvents.map(function (event) {
            var overLappingEvents = getOverLappingEvents(event, mappedEvents.filter(function (otherEvent) { return otherEvent.left > event.left; }), event.top, event.top + event.height, logEnabled);
            if (logEnabled) {
                console.log("DAY [" + moment(day.date).format('dddd L') + "] " +
                    ("- EVENT " + event.event.id + " [" + moment(event.event.start).format('dddd L, LTS') + " ") +
                    ("- " + moment(event.event.end).format('dddd L, LTS') + "] overLappingEvents -> "), overLappingEvents);
            }
            if (overLappingEvents.length > 0) {
                return __assign(__assign({}, event), { width: Math.min.apply(Math, __spread(overLappingEvents.map(function (otherEvent) { return otherEvent.left; }))) - event.left });
            }
            return event;
        });
        day.hours = getSchedulerViewHourGrid(dateAdapter, {
            viewDate: viewDate,
            hourSegments: hourSegments,
            dayStart: {
                hour: dayStart.hour,
                minute: dayStart.minute
            },
            dayEnd: {
                hour: dayEnd.hour,
                minute: dayEnd.minute
            }
        }).map(function (hour) {
            var date = new Date(day.date.getFullYear(), day.date.getMonth(), day.date.getDate(), hour.segments[0].date.getHours());
            var startOfHour = new Date(day.date.getFullYear(), day.date.getMonth(), day.date.getDate(), hour.segments[0].date.getHours());
            var endOfHour = dateAdapter.addSeconds(dateAdapter.addHours(startOfHour, 1), -1);
            var eventsInHour = getSchedulerEventsInPeriod(dateAdapter, {
                events: day.events,
                periodStart: startOfHour,
                periodEnd: endOfHour
            });
            var segments = hour.segments.map(function (segment) {
                segment.date = dateAdapter.setDate(dateAdapter.setMonth(dateAdapter.setYear(segment.date, day.date.getFullYear()), day.date.getMonth()), day.date.getDate());
                var startOfSegment = segment.date;
                var endOfSegment = dateAdapter.addSeconds(dateAdapter.addMinutes(startOfSegment, MINUTES_IN_HOUR / hourSegments), -1);
                var eventsInSegment = getSchedulerEventsInPeriod(dateAdapter, {
                    events: eventsInHour,
                    periodStart: startOfSegment,
                    periodEnd: endOfSegment
                });
                if (logEnabled) {
                    console.log("SEGMENT [" + moment(startOfSegment).format('dddd L, LTS') + " - " + moment(endOfSegment).format('dddd L, LTS') + "] EVENTS -> ", eventsInSegment);
                }
                return {
                    segment: segment,
                    date: new Date(segment.date),
                    events: eventsInSegment
                };
            });
            return {
                hour: hour,
                date: date,
                events: eventsInHour,
                segments: segments
            };
        });
    });
    return {
        days: days,
        period: {
            events: eventsInWeek,
            start: startOfViewWeek,
            end: endOfViewWeek
        }
    };
}
export function getSchedulerViewDays(dateAdapter, _a) {
    var viewDate = _a.viewDate, viewDays = _a.viewDays, weekStartsOn = _a.weekStartsOn, startsWithToday = _a.startsWithToday, _b = _a.excluded, excluded = _b === void 0 ? [] : _b, _c = _a.weekendDays, weekendDays = _c === void 0 ? DEFAULT_WEEKEND_DAYS : _c;
    var start = startsWithToday || viewDays < DAYS_IN_WEEK
        ? new Date(viewDate)
        : dateAdapter.startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    var days = [];
    var loop = function (i) {
        var date = dateAdapter.addDays(start, i);
        if (!excluded.some(function (e) { return date.getDay() === e; })) {
            days.push(getSchedulerDay(dateAdapter, { date: date, weekendDays: weekendDays }));
        }
    };
    for (var i = 0; i < viewDays; i++) {
        loop(i);
    }
    return days;
}
function getSchedulerDay(dateAdapter, args) {
    var date = args.date;
    var today = dateAdapter.startOfDay(new Date());
    return {
        date: date,
        isPast: date < today,
        isToday: dateAdapter.isSameDay(date, today),
        isFuture: date >= dateAdapter.addDays(today, 1),
        isWeekend: args.weekendDays.indexOf(dateAdapter.getDay(date)) > -1,
        inMonth: dateAdapter.isSameMonth(date, today),
        hours: []
    };
}
function getEventsInPeriod(dateAdapter, _a) {
    var events = _a.events, periodStart = _a.periodStart, periodEnd = _a.periodEnd;
    return events.filter(function (event) { return isEventInPeriod(dateAdapter, { event: event, periodStart: periodStart, periodEnd: periodEnd }); });
}
function getSchedulerEventsInPeriod(dateAdapter, _a) {
    var events = _a.events, periodStart = _a.periodStart, periodEnd = _a.periodEnd;
    return events.filter(function (event) { return isEventInPeriod(dateAdapter, { event: event.event, periodStart: periodStart, periodEnd: periodEnd }); });
}
function isEventInPeriod(dateAdapter, _a) {
    var event = _a.event, periodStart = _a.periodStart, periodEnd = _a.periodEnd;
    var isSameSecond = dateAdapter.isSameSecond, addSeconds = dateAdapter.addSeconds;
    var eventStart = event.start;
    var eventEnd = event.end || event.start;
    if (eventStart > periodStart && eventStart < periodEnd) {
        return true;
    }
    if (eventEnd > periodStart && eventEnd < periodEnd) {
        return true;
    }
    if (eventStart < periodStart && eventEnd > periodEnd) {
        return true;
    }
    if (isSameSecond(eventStart, periodStart) || isSameSecond(eventStart, periodEnd)) {
        return true;
    }
    if (isSameSecond(addSeconds(eventEnd, -1), periodStart) || isSameSecond(addSeconds(eventEnd, -1), periodEnd)) {
        return true;
    }
    return false;
}
function getOverLappingEvents(event /*SchedulerViewEvent | CalendarSchedulerEvent*/, events, top, bottom, logEnabled) {
    if (logEnabled === void 0) { logEnabled = false; }
    return events.filter(function (previousEvent) {
        var _a, _b, _c;
        top = Math.round(top);
        bottom = Math.round(bottom);
        var previousEventTop = Math.floor(previousEvent.top);
        var previousEventBottom = Math.floor(previousEvent.top + previousEvent.height);
        if (top < previousEventBottom && previousEventBottom < bottom) {
            if (logEnabled) {
                console.log('[getOverLappingEvents] - EVENT ' + (((_a = event.event) === null || _a === void 0 ? void 0 : _a.id) || event.id) + ' -> top: ' + top + ' - bottom: ' + bottom + ' | PREVIOUS EVENT ' + previousEvent.event.id
                    + ' -> previousEventTop: ' + previousEventTop + ' - previousEventBottom: ' + previousEventBottom + ' -> top < previousEventBottom && previousEventBottom < bottom');
            }
            return true;
        }
        else if (top < previousEventTop && previousEventTop < bottom) {
            if (logEnabled) {
                console.log('[getOverLappingEvents] - EVENT ' + (((_b = event.event) === null || _b === void 0 ? void 0 : _b.id) || event.id) + ' -> top: ' + top + ' - bottom: ' + bottom + ' | PREVIOUS EVENT ' + previousEvent.event.id
                    + ' -> previousEventTop: ' + previousEventTop + ' - previousEventBottom: ' + previousEventBottom + ' -> top < previousEventTop && previousEventTop < bottom');
            }
            return true;
        }
        else if (previousEventTop <= top && bottom <= previousEventBottom) {
            if (logEnabled) {
                console.log('[getOverLappingEvents] - EVENT ' + (((_c = event.event) === null || _c === void 0 ? void 0 : _c.id) || event.id) + ' -> top: ' + top + ' - bottom: ' + bottom + ' | PREVIOUS EVENT ' + previousEvent.event.id
                    + ' -> previousEventTop: ' + previousEventTop + ' - previousEventBottom: ' + previousEventBottom + ' -> previousEventTop <= top && bottom <= previousEventBottom');
            }
            return true;
        }
        return false;
    });
}
function sanitiseHours(hours) {
    return Math.max(Math.min(23, hours), 0);
}
function sanitiseMinutes(minutes) {
    return Math.max(Math.min(59, minutes), 0);
}
//# sourceMappingURL=data:application/json;base64,