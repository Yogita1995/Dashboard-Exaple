import { Pipe, LOCALE_ID, Inject } from '@angular/core';
import { CalendarDateFormatter, DateAdapter } from 'angular-calendar';
export class CalendarSchedulerDatePipe {
    constructor(dateAdapter, dateFormatter, locale) {
        this.dateAdapter = dateAdapter;
        this.dateFormatter = dateFormatter;
        this.locale = locale;
    }
    transform(date, method, locale = this.locale, weekStartsOn = 0, excludeDays = [], daysInWeek, startsWithToday) {
        if (typeof this.dateFormatter[method] === 'undefined') {
            const allowedMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(CalendarDateFormatter.prototype)).filter(iMethod => iMethod !== 'constructor');
            throw new Error(`${method} is not a valid date formatter. Can only be one of ${allowedMethods.join(', ')}`);
        }
        return this.dateFormatter[method]({
            dateAdapter: this.dateAdapter,
            date,
            locale,
            weekStartsOn,
            excludeDays,
            daysInWeek,
            startsWithToday
        });
    }
}
CalendarSchedulerDatePipe.ctorParameters = () => [
    { type: DateAdapter },
    { type: CalendarDateFormatter },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
CalendarSchedulerDatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'calendarSchedulerDate'
            },] }
];
CalendarSchedulerDatePipe.ctorParameters = () => [
    { type: DateAdapter },
    { type: CalendarDateFormatter },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2NoZWR1bGVyLWRhdGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItY2FsZW5kYXItc2NoZWR1bGVyLyIsInNvdXJjZXMiOlsibW9kdWxlcy9zY2hlZHVsZXIvcGlwZXMvY2FsZW5kYXItc2NoZWR1bGVyLWRhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUt0RSxNQUFNLE9BQU8seUJBQXlCO0lBQ3BDLFlBQ1UsV0FBd0IsRUFDeEIsYUFBb0MsRUFDakIsTUFBYztRQUZqQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixrQkFBYSxHQUFiLGFBQWEsQ0FBdUI7UUFDakIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUN4QyxDQUFDO0lBRUosU0FBUyxDQUNQLElBQVUsRUFDVixNQUFjLEVBQ2QsU0FBaUIsSUFBSSxDQUFDLE1BQU0sRUFDNUIsZUFBdUIsQ0FBQyxFQUN4QixjQUF3QixFQUFFLEVBQzFCLFVBQW1CLEVBQ25CLGVBQXlCO1FBRXpCLElBQUksT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFdBQVcsRUFBRTtZQUNyRCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQy9DLE1BQU0sQ0FBQyxjQUFjLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQ3ZELENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxLQUFLLGFBQWEsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sSUFBSSxLQUFLLENBQ2IsR0FBRyxNQUFNLHNEQUFzRCxjQUFjLENBQUMsSUFBSSxDQUNoRixJQUFJLENBQ0wsRUFBRSxDQUNKLENBQUM7U0FDSDtRQUNELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsSUFBSTtZQUNKLE1BQU07WUFDTixZQUFZO1lBQ1osV0FBVztZQUNYLFVBQVU7WUFDVixlQUFlO1NBQ2hCLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQWpDc0IsV0FBVztZQUNULHFCQUFxQjt5Q0FDM0MsTUFBTSxTQUFDLFNBQVM7OztZQVBwQixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLHVCQUF1QjthQUM5Qjs7O1lBSitCLFdBQVc7WUFBbEMscUJBQXFCO3lDQVN6QixNQUFNLFNBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIExPQ0FMRV9JRCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENhbGVuZGFyRGF0ZUZvcm1hdHRlciwgRGF0ZUFkYXB0ZXIgfSBmcm9tICdhbmd1bGFyLWNhbGVuZGFyJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnY2FsZW5kYXJTY2hlZHVsZXJEYXRlJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJTY2hlZHVsZXJEYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBkYXRlQWRhcHRlcjogRGF0ZUFkYXB0ZXIsXHJcbiAgICBwcml2YXRlIGRhdGVGb3JtYXR0ZXI6IENhbGVuZGFyRGF0ZUZvcm1hdHRlcixcclxuICAgIEBJbmplY3QoTE9DQUxFX0lEKSBwcml2YXRlIGxvY2FsZTogc3RyaW5nXHJcbiAgKSB7fVxyXG5cclxuICB0cmFuc2Zvcm0oXHJcbiAgICBkYXRlOiBEYXRlLFxyXG4gICAgbWV0aG9kOiBzdHJpbmcsXHJcbiAgICBsb2NhbGU6IHN0cmluZyA9IHRoaXMubG9jYWxlLFxyXG4gICAgd2Vla1N0YXJ0c09uOiBudW1iZXIgPSAwLFxyXG4gICAgZXhjbHVkZURheXM6IG51bWJlcltdID0gW10sXHJcbiAgICBkYXlzSW5XZWVrPzogbnVtYmVyLFxyXG4gICAgc3RhcnRzV2l0aFRvZGF5PzogYm9vbGVhblxyXG4gICk6IHN0cmluZyB7XHJcbiAgICBpZiAodHlwZW9mIHRoaXMuZGF0ZUZvcm1hdHRlclttZXRob2RdID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBjb25zdCBhbGxvd2VkTWV0aG9kcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKFxyXG4gICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihDYWxlbmRhckRhdGVGb3JtYXR0ZXIucHJvdG90eXBlKVxyXG4gICAgICApLmZpbHRlcihpTWV0aG9kID0+IGlNZXRob2QgIT09ICdjb25zdHJ1Y3RvcicpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgYCR7bWV0aG9kfSBpcyBub3QgYSB2YWxpZCBkYXRlIGZvcm1hdHRlci4gQ2FuIG9ubHkgYmUgb25lIG9mICR7YWxsb3dlZE1ldGhvZHMuam9pbihcclxuICAgICAgICAgICcsICdcclxuICAgICAgICApfWBcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmRhdGVGb3JtYXR0ZXJbbWV0aG9kXSh7XHJcbiAgICAgIGRhdGVBZGFwdGVyOiB0aGlzLmRhdGVBZGFwdGVyLFxyXG4gICAgICBkYXRlLFxyXG4gICAgICBsb2NhbGUsXHJcbiAgICAgIHdlZWtTdGFydHNPbixcclxuICAgICAgZXhjbHVkZURheXMsXHJcbiAgICAgIGRheXNJbldlZWssXHJcbiAgICAgIHN0YXJ0c1dpdGhUb2RheVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==